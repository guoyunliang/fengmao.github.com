---
title: gdb reference
layout: post
tags: gdb reference
category: programming
---

我在"[gdb 原理](http://xanpeng.github.com/2012/05/06/gdb/)"和"[how debuggers work](http://xanpeng.github.com/2012/06/30/how-debuggers-work/)"大致介绍了gdb的原理. 本文来总结gdb的详细使用, 涉及:  
1. 各种命令.  
2. cheat sheet, 供快速参考.  
3. "高级"用法.

---

#cheat-sheets + books

[cheat sheet addr1](http://darkdust.net/files/GDB%20Cheat%20Sheet.pdf)(推荐).  
[cheat sheet addr2](http://users.ece.utexas.edu/~adnan/gdb-refcard.pdf).  
[cheat sheet addr3](http://erik.cabetas.com/stuff/debug/gdb-essentials.pdf).

[redhat documentation](http://sources.redhat.com/gdb/documentation/)页面列有gdb的资料:  
1. [Debugging With GDB](http://sourceware.org/gdb/current/onlinedocs/gdb.pdf.gz) by RMS.  
2. [GDB Internals](http://sourceware.org/gdb/current/onlinedocs/gdbint.pdf.gz) by John Gilmore.  

其他补充资料:  
1. [Peter's gdb tutorial](http://dirac.org/linux/gdb/).  
2. [gdb FAQ](http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html).  

---

**"Debugging With GDB"的目录**

(已读) ch4. running programs under gdb  
(已读) ch5. stopping and continuing  
ch6. running programs backward  
ch7. recording inferior's execution and replaying it  
ch8. examining the stack  
ch9. examining source files  
ch10. examining data  
ch11. debugging optimized code  
ch12. c preprocessor macros  
ch13. tracepoints  
ch14. debugging programs that use overlays  
ch15. using gdb with different languages  
ch16. examining the symbol table  
ch17. altering execution  
ch18. gdb files  
ch19. specifying a debugging target  
ch20. debugging remote programs  
ch21. configuration-specific information  
ch22. controlling gdb  
ch23. extending gdb  
ch24.  command interpreters  
ch25. gdb text user interface  
ch26. using gdb under gnu emacs  
ch27. the gdb/mi interface  
ch28. gdb annotations  
ch29. JIT compilation interface  
ch30. in-process agent  
ch31. reporting bugs in gdb  
ch32. command line editing  
ch33. using history interactively  
Appendix A. in memoriam  
Appendix B. formatting documentation  
Appendix C. installing gdb  
Appendix D. maintenance commands  
Appendix E. gdb remote serial protocol  
Appendix F. the gdb agent expression machanism  
Appendix G. target descriptions  
Appendix H. operating system information  
Appendix I. trace file format  
Appendix J. .gdb_index section format  
...

---

#RUN programs under gdb

在程序执行之前, 可以向程序传递四类信息:  
arguments: run *arg1, arg2, ...*, set *args ...*, show args.  
environment: path *directory*, show paths, show environment [*varname*], set environment *varname* [*=value*], unset environment *varname*.  
working dir: cd *directory*, pwd.  
input/output: info terminal, run > outfile

在程序执行之前, 可以设定程序需要的库等:  
set exec-wrapper *wrapper*  
show exec-wrapper  
unset exec-wrapper.

在程序执行之前, 可以设定程序的虚拟地址的random offset机制:  
set/show disable-randomization on/off.

调试已在执行的进程:  
attach *process-id*  
detach  

调试多个进程:  
info inferiors  
inferior *infno*  
add-inferior [-copies *n*] [-exec *executable*]  
clone-inferior [-copies *n*] [*infno*]  
remove-inferiors *infno...*  
detach inferior *infno...*  
kill inferior *infno...*  

调试多线程:  
info threads [*id...*]  
thread *threadno*  
thread apply [*threadno* | *all*] command  
thread name [*name*]  
thread find [*regexp*]  

调试fork出来的子进程:  
set follow-fork-mode [*mode*]  
show follow-fork-mode  
set detach-on-fork [*mode*]  
show detach-on-fork  
set follow-exec-mode *mode (new/same)*  

设置"书签(bookmark)":  
目前只有GNU/Linux支持此功能. GDB能够保存程序状态的snapshot, 称之为checkpoint, 后面可以返回到之前的checkpoint.  
checkpoint  
info checkpoints  
restart *checkpoint-id*  
delete checkpoint *checkpoint-id*  

#breakpoints

break *location*  
break  
break ... if *cond*  
rbreak *regex*, 针对functions.  
rbreak *file:regex*
tbreak args, 只有效一次.  
info breakpoints/break [*n...*]  
disable [*breakpoints*] [*range...*]  
enable [*breakpoints*] [*range...*]  
enable [*breakpoints*] once *range...*  
enable [*breakpoints*] count *count* *range...*  
enable [*breakpoints*] delete *range...*  
clear [*location*]  
delete [*breakpoints*] [*range...*]  
save breakpoints [*filename*]  

一些选项:  
show/set breakpoint pending auto/on/off  
set breakpoint auto-hw on/off  
set breakpoint always-inserted auto/on/off  
set breakpoint condition-evaluation host/target/auto  

#watchpoints

use a watchpoint to stop execution whenever the value of an expression changes.  
watch [-l|-location] *expr* [thread *threadnum*] [mask *maskvalue*]  
rwatch [-l|-location] *expr* [thread *threadnum*] [mask *maskvalue*], 值被程序读取时break.  
awatch [-l|-location] *expr* [thread *threadnum*] [mask *maskvalue*], 值被程序读取或写入时break.  
info watchpoints [*n...*]  

#catchpoints

use catchpoints to cause the debugger to stop for certain kinds of program events.  
catch *event (throw, catch, exception, exception unhandled, assert, exec, syscall, syacall name | number, fork, vfork, load/unload regexp)*  
tcatch *event*  

#continuing and stepping

fg/continue [*ignore-count*]  
step [*count*]  
next [*count*]  
show/set step-mode [*on/off*]  
finish  
until [*location*]  
advance *location*  
stepi [*arg*]  
nexti [*arg*]  

#skip

skip [*linespec*]  
skip function [*linespec*]  
skip file [*filename*]  
info skip [*range*]  
skip delete [*range*]  
skip enable/disable [*range*]  

#signals

#stop/start multi-threaded programs

默认模式为all-stop mode, 任何线程stop时, 所有其他线程也stop. 如果你继续执行时, 所有其他线程也继续执行. 但实际上gdb是不能同时single-step所有线程的, 因为线程调度是操作系统决定的, 所以你step了一个线程, 其他线程可能执行了很多步, 并且其他线程可能停在某个语句的中间, 处于一种数据不"完备"的状态.  
在某些操作系统里, 可以通过locking the OS scheduler来修改gdb的默认行为, 可以使只有一个线程能够执行.  
set scheduler-locking *mode*, off表示任何线程可以在任何时候执行, on表示只有当前线程能够执行, step是为single-step做的优化, 它能阻止其它线程抢占正在执行单步调试线程的CPU, 从而保证了基本上不会出"意外".  
show scheduler-locking  

控制所有inferiors(进程?)的所有线程:  
set schedule-multiple *on/off*  
show schedule-multiple  

对应于all-stop mode的是non-stop mode, 在调试某个线程的时候, 其他线程可以继续自由地执行.  
set non-stop *on/off*  
show non-stop  

后台执行, 前台执行指gdb需要等待程序stop, 才能提示输入新的指令. 后台执行相反, 相当于asynchronous方式.    
set target-async *on/off*  
show target-async  
interrupt [-a], 中断处于后台模式的程序.  

thread-specific breakpoints:  
break *linespec* thread *threadno*  
break *linespec* thread *threadno* if ...  

观察者模式, 用以观察程序行为, 不通过更改变量值, 插入断点等方式尝试修改程序状态. gdb提供了变量observer用以方便地控制.  
set observer *on/off*  
show observer  
set may-write-registers *on/off*  
show may-write-registers  
set may-write-memory *on/off*  
show may-write-memory  
set may-insert-breakpoints *on/off*  
show may-insert-breakpoints  
set may-insert-tracepoints *on/off*  
show may-insert-tracepoints  
set may-insert-fast-tracepoints *on/off*  
show may-insert-fast-tracepoints  
set may-interrupt *on/off*  
show may-interrupt  

#call stack

gdb自动给所有存在的栈帧(stack frame)编号, 从0开始, 0表示innermost的栈帧. 不过某些编译器提供不生成栈帧的编译方式, 如gcc的-fomit-frame-pointer, 这么做的目的是在大量使用库函数的时候节省栈帧的初始化时间. 对此, gdb仅提供有限的支持.  
backtrace  
backtrace *n*  
backtrace *-n*  
backtrace full [*n|-n*]  
set backstrace past-main [*on/off*]  
show backstrace past-main  
set backstrace past-entry [*on/off*]  
show backstrace past-entry  
set backstrace limit *n/0*  
show backstrace limit  

选择栈帧:  
frame *n*  
select-frame  
frame *addr*  
up *n*  
down *n*  
up-silently *n*  
down-silently *n*  

栈帧信息:  
frame  
info frame [*addr*]  
info args, 打印当前选择的栈帧的args.  
info locals, 打印当前选择的栈帧的局部变量.  

#源代码

list  
list *linenum*  
list *filename:linenum*  
list *function*  
list *function:label*  
list *filename:function*  
list *label*  
list **\*address**
list *first*, *last*  
list *, last*  
list *first,*  
list +[*offset*]  
list -[*offset*]  
set listsize *count*  
show listsize  

edit *location*  

forward-search/search *regexp*  
reverse-search *regexp*  

指定源代码目录:  
directory *dirname ...*  
directory, 重置到默认值.  
set directories *path-list*  
show directories  
set substitute-path *from to*  
unset substitute-path [path]  
show substitute-path [path]  

#机器码  

info line *linespec*  
disassemble [*start, end|+length*] | [*function*]  
disassemble /m [*start, end|+length*] | [*function*]  
disassemble /r [*start, end|+length*] | [*function*]  
set disassembly-flavor *instruction-set*  
show disassembly-flavor  
set disassemble-next-line  
show disassemble-next-line  

#examining data

print *expr*  
print */f expr*, f指定输出格式, 可以是x,d,u,o,t,a,c,f,s,r等.  
print \*array@len, 打印数组.  

examine mem:  
x/*nfu addr*, n: repeat count. f: display format. u: unit size.  
x *addr*  

automatic display, 等于把要看的变量等放到一起:  
display  
display expr  
display/*fmt expr*  
display/*fmt addr*  
undisplay *dnums...*  
delete display *dnums...*  
disable display *dnums...*  
enable display *dnums...*  
info display  

打印设置:  
show/set print address [on/off]  
show/set print symbol-filename on/off  
show/set print max-symbolic-offset max-offset  
show/set print symbol on/off  
show/set print array [on/off]  
show/set print array-indexes [on/off]  
show/set print elements number-of-elements  
show/set print frame-arguments value  
show print entry-values  
show/set print repeats  
show/set print null-stop  
show/set print pretty on/off  
show/set print sevenbit-strings on/off  
show/set print union on/off  
show/set print demangle on/off  
show/set print asm-demangle on  
show/set demangle-style *style*  
show/set print object on/off  
show/set print static-members on/off  
show/set print **vtbl** on/off  

pretty-printer:  
info pretty-printer [*object-regexp* [*name-regexp*]]  
enable/disable pretty-printer [*object-regexp* [*name-regexp*]]  

和symbol多义有关:  
set multiple-symbols *mode(all/ask/cancel)*  
show multiple-symbols  

#debugging optimized code  

你肯定遇到过"value be optimized"这样的信息, 并有点抓狂. 此时可以设置编译选项取消优化, 并重编译. 但有时你需要调试优化版本, 因为贴近实际情况.  

**inline funcitons**  
inline是对编译器的建议, 可以通过info frame来确定函数是否inlined. 不过即使函数inlined, 仍然可以像普通函数那样去查看其args, 局部变量, 去step/next/finish. 但仍有些限制, 在今后使用中将会发现. 
gcc使用DWARF 2格式记录inlining debug信息, gdb仅在使用DWARF 2时才支持inlined function.  

**tail call frames**  
A调用B, B在return的时候调用C, 即使用return C()这种代码. 这称之为tail call. optimizing compiler可能会优化这段代码, gdb会看到C的调用者是A. info frame命令可以看到tail call的信息.  

#tracepoints

需求: 调试实时应用, 要求extremely low intrusiveness. 如调试在线应用, 调试race conditions等.  
trace *location*  
trace *location* if *cond*  
ftrace *location* [if *cond*]  
strace *location* [if *cond*]  
delete tracepoint [*num*]
enable/disable tracepoint [*num*]  
passcount [*n* [*num*]]  

trace state variables:  
tvariable $*name* [= *expression*]  
info tvariables  
delete tvariable [$*name* ...]  

tracepoint action lists:  
actions [*num*]  
collect [*/mods*] *expr1, expr2, ...*  
teval *expr1, expr2, ...*  
while-stepping *n*  
set default-collect *expr1, expr2, ...*  
show default-collect  

listing tracepoints:  
info tracepoints [*num ...*]  
info static-tracepoint-markers  

start and stop trace experiments:  
tstart  
tstop  
tstatus  
show/set disconnected-tracing *on/off*  

tfind start/none/end/-/trace point *num*/pc *addr*

#examining the symbol table

show/set case-sensitive on/off/auto  
info address *symbol*  
info symbol *addr*  
whatis [*arg*]  
ptype [*arg*]  
info types [*regexp*]  
info scope *location*  
info source/sources  
info functions [*regexp*]  
info variables [*regexp*]  
info classes [*regexp*]  
info selectors [*regexp*]  
show/set opaque-type-resolution on/off  
maint print symbols/psymbols/msymbols *filename*  
maint info symtabs/psymtabs [*regexp*]  