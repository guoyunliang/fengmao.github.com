<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=OneNote.File>
<meta name=Generator content="Microsoft OneNote 15">
<link id=Main-File rel=Main-File href=file3768.htm>
<link rel=File-List href="file3768.files/filelist.xml">
</head>

<body lang=zh-CN style='font-family:Calibri;font-size:10.5pt;color:black'>

<div style='direction:ltr;border-width:100%'>

<div style='direction:ltr;margin-top:0in;margin-left:0in;width:7.209in'>

<div style='direction:ltr;margin-top:0in;margin-left:.0215in;width:4.6895in'>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:27pt;font-size:20.0pt;
color:#444444'><span style='font-weight:bold;font-family:Calibri' lang=en-US>TAIR</span><span
style='font-weight:bold;font-family:SimSun' lang=zh-CN>批量导入数据问题与解决方案</span></p>

</div>

<div style='direction:ltr;margin-top:.0416in;margin-left:.0215in;width:1.5597in'>

<p style='margin:0in;font-size:9.0pt;color:gray'><span style='font-family:Calibri'>2014</span><span
style='font-family:SimSun'>年</span><span style='font-family:Calibri'>3</span><span
style='font-family:SimSun'>月</span><span style='font-family:Calibri'>18</span><span
style='font-family:SimSun'>日</span></p>

<p style='margin:0in;font-family:Calibri;font-size:9.0pt;color:gray'>22:29</p>

</div>

<div style='direction:ltr;margin-top:.4041in;margin-left:0in;width:7.209in'>

<p style='margin-top:7pt;margin-bottom:7pt;font-size:20.0pt;color:#444444;
text-align:center'><span style='font-weight:bold;font-family:Calibri'
lang=en-US>TAIR</span><span style='font-weight:bold;font-family:SimSun'
lang=zh-CN>批量导入数据问题与解决方案</span></p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US>&nbsp;</p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444'><span style='font-weight:bold' lang=en-US>1. </span><span
style='font-weight:bold' lang=zh-CN>前言</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt'><span
style='color:black' lang=zh-CN>分布式存储系统在</span><a
href="http://code.taobao.org/p/tair/src/branches/easy_trunk_admin/"><span
lang=en-US>TAIR</span></a><span style='color:black' lang=zh-CN>阿里系内部有广泛的应用。随着业务的发展，特别是大数据处理技术飞速发展，</span><span
style='color:black' lang=en-US> </span><span style='color:black' lang=zh-CN>业务方对</span><span
style='color:black' lang=en-US>TAIR</span><span style='color:black' lang=zh-CN>的应用场景也提出了新的需求。在这样情况下，</span><span
style='color:black' lang=en-US>TAIR</span><span style='color:black' lang=zh-CN>也针对业务方的需求，作了大量的工作以满足业务方的需求。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在</span><span lang=en-US>TAIR</span><span
lang=zh-CN>产品的发展过程中，特别是持久化</span><span lang=en-US>TAIR</span><span lang=zh-CN>在阿里系大规模应用后，希望</span><span
lang=en-US>TARI</span><span lang=zh-CN>是数据孤岛，而希望</span><span lang=en-US>TAIR</span><span
lang=zh-CN>中存储的数据能够在各个系统中快速流转。更好地为业务方提供灵活，高效，可靠的存储服务。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>本文将介绍</span><span lang=en-US>TAIR FASTDUMP</span><span
lang=zh-CN>集群的导入数据解决方案，该方案由</span><span lang=en-US>TAIR</span><span lang=zh-CN>开发团队完成。首先，描述一些典型的业务场景；其次，叙述导入数据所面临的挑战；接着，叙述现有方案，以及该方案所面临的困难；再次，给出新的批量导入数据方案；最后，实验对比。</span></p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US>&nbsp;</p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US><span style='font-weight:bold'>2.
批量导入数据给TAIR带来的挑战</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=en-US>TAIR</span><span lang=zh-CN>最初作为一个</span><span
lang=en-US>KV</span><span lang=zh-CN>存储系统，对业务方提供</span><span lang=en-US>PUT/GET</span><span
lang=zh-CN>这样基本接口。随着大数据时代的来临，业务方强烈需要</span><span lang=en-US>TAIR</span><span
lang=zh-CN>能够支持快速导出导入数据能力。例如，业务方希望从云梯上处理过的数据快速导入到</span><span lang=en-US>TAIR</span><span
lang=zh-CN>中，供其他应用使用这些数据。在这个场景中，</span><span lang=en-US>TAIR</span><span
lang=zh-CN>是一个数据中转站，如图</span><span lang=en-US>1</span><span lang=zh-CN>所示。</span></p>

<p style='margin:0in'><img src="file3768.files/image001.jpg" width=720
height=369 alt="计算机生成了可选文字:&#10;数据源&#10;下AIRFASTOUMP集群&#10;应用服务器&#10;导数据工具"></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-size:10.0pt;
color:black;text-align:center'><span style='font-family:宋体' lang=zh-CN>图</span><span
style='font-family:Consolas' lang=en-US>1 TAIR FASTDUMP </span><span
style='font-family:宋体' lang=zh-CN>集群使用场景</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-family:楷体;
font-size:12.0pt;color:black'>&nbsp;</p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>如图</span><span lang=en-US>1</span><span
lang=zh-CN>所示，这是一个经典的应用场景，业务方希望数据能够快速导入到</span><span lang=en-US>TAIR</span><span
lang=zh-CN>中。并且，在导入数据的过程中，允许对</span><span lang=en-US>TAIR</span><span
lang=zh-CN>中数据增量更新。</span><span lang=en-US> </span><span lang=zh-CN>在这样场景中，对</span><span
lang=en-US>TAIR</span><span lang=zh-CN>提出了新的要求：</span></p>

<ul type=disc style='margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>能够快速有效地批量导入数据。 云梯（类似</span><span style='font-family:楷体;
     font-size:12.0pt' lang=en-US>hadoop</span><span style='font-family:楷体;
     font-size:12.0pt' lang=zh-CN>集群）上产生的数据有较强的时效性，业务方希望这些数据能够尽快流向其他业务。并且这些数据随着业务的发展，数据量有可能是</span><span
     style='font-family:楷体;font-size:12.0pt' lang=en-US>T</span><span
     style='font-family:楷体;font-size:12.0pt' lang=zh-CN>级的。若导入数据速度太慢，显然不能满足要求。</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>批量导入数据尽可能保证</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>TAIR</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>集群正常服务。 从成本控制角度考虑，</span><span style='font-family:楷体;
     font-size:12.0pt' lang=en-US>TAIR</span><span style='font-family:楷体;
     font-size:12.0pt' lang=zh-CN>集群基本上是多业务方共同使用的。若一个业务在导入数据，其他业务方无法使用该集群，这也是不能接受的。也就是说，在批量导入数据的过程中，希望正常的</span><span
     style='font-family:楷体;font-size:12.0pt' lang=en-US>KV</span><span
     style='font-family:楷体;font-size:12.0pt' lang=zh-CN>数据读取的性能不会显著下降。</span></li>
</ul>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>持久化</span><span lang=en-US>TAIR</span><span
lang=zh-CN>底层存储引擎是</span><span lang=en-US>leveldb(</span><span lang=zh-CN>详细信息，请见</span><a
href="https://code.google.com/p/leveldb/"><span lang=zh-CN>这里</span></a><span
lang=en-US>); TAIR SERVER</span><span lang=zh-CN>的工作线程处理客户端发来的请求，这些工作线程最终调用底层</span><span
lang=en-US>leveldb</span><span lang=zh-CN>的</span><span lang=en-US>API</span><span
lang=zh-CN>完成数据的读写。为了叙述</span><span lang=en-US>TAIR</span><span lang=zh-CN>所面临的挑战。将调用</span><span
lang=en-US>leveldb write</span><span lang=zh-CN>接口的线程称之为</span><span
lang=en-US>Writer </span><span lang=zh-CN>线程，调用</span><span lang=en-US>leveldb
read</span><span lang=zh-CN>接口的线程称之为</span><span lang=en-US>Reader</span><span
lang=zh-CN>线程。另外，</span><span lang=en-US>leveldb</span><span lang=zh-CN>每个实例都有一个执行合并冗余数据的后台线程，称之为</span><span
lang=en-US>Compact</span><span lang=zh-CN>线程。如图</span><span lang=en-US>2</span><span
lang=zh-CN>所示。</span></p>

<p style='margin:0in'><img src="file3768.files/image002.jpg" width=720
height=503
alt="计算机生成了可选文字:&#10;WFiter&#10;Wriler&#10;Wrlter&#10;LEVELOBINSTANCE&#10;MEMOR丫下A日LE&#10;干&#10;L任VELO&#10;Compact&#10;ThFead&#10;LEVELI&#10;LEVELN&#10;户―爪―-1-lr&#10;一&#10;一&#10;000"></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-size:10.0pt;
color:black;text-align:center'><span style='font-family:宋体' lang=zh-CN>图</span><span
style='font-family:Consolas' lang=en-US>2 Writer/Reader</span><span
style='font-family:宋体' lang=zh-CN>，</span><span style='font-family:Consolas'
lang=en-US>Compact</span><span style='font-family:宋体' lang=zh-CN>线程</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-family:楷体;
font-size:12.0pt;color:black'>&nbsp;</p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>本文并不打算详细介绍</span><span lang=en-US>LEVELDB</span><span
lang=zh-CN>工作原理。如图</span><span lang=en-US>2</span><span lang=zh-CN>所示，</span><span
lang=en-US>Writer</span><span lang=zh-CN>线程将数据首先写入内存</span><span lang=en-US>Table</span><span
lang=zh-CN>中。当内存</span><span lang=en-US>Table</span><span lang=zh-CN>容量超过阈值后，</span><span
lang=en-US>Compact</span><span lang=zh-CN>线程会将内存中数据生成</span><span lang=en-US>SST</span><span
lang=zh-CN>文件，并写入磁盘。在</span><span lang=en-US>leveldb</span><span lang=zh-CN>处于稳定运行后，内存</span><span
lang=en-US>Table</span><span lang=zh-CN>中的数据通常会写入</span><span lang=en-US>LEVEL0</span><span
lang=zh-CN>，</span><span lang=en-US>LEVEL0</span><span lang=zh-CN>实际上是一个</span><span
lang=en-US>SST</span><span lang=zh-CN>文件的集合；若</span><span lang=en-US>LEVELn</span><span
lang=zh-CN>的数据容量超过阈值，</span><span lang=en-US>compact</span><span lang=zh-CN>线程将合并</span><span
lang=en-US>LEVELn </span><span lang=zh-CN>和</span><span lang=en-US> LEVELn+1</span><span
lang=zh-CN>上的一部分数据，形成新的文件记录在</span><span lang=en-US>LEVELn+1</span><span
lang=zh-CN>中。这个过程会一直进行着，其结果是数据依次从内存</span><span lang=en-US>Table</span><span
lang=zh-CN>中写入磁盘，记录在较高</span><span lang=en-US>LEVEL</span><span lang=zh-CN>中。在实际生成运维过程中，我们观测到</span><span
lang=en-US>Compact</span><span lang=zh-CN>线程是非常耗时的，对</span><span lang=en-US>LEVELDB</span><span
lang=zh-CN>的读写性能有很大影响。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>显然，若快速导入数据，</span><span lang=en-US>Writer</span><span
lang=zh-CN>线程需要占用更多</span><span lang=en-US>CPU</span><span lang=zh-CN>，快速处理写请求。而这很容易让内存</span><span
lang=en-US>Table</span><span lang=zh-CN>容量超过阈值，</span><span lang=en-US>Compact</span><span
lang=zh-CN>线程启动后，</span><span lang=en-US>Writer</span><span lang=zh-CN>线程会主动减缓写入数据的速度。并且，</span><span
lang=en-US>Compact</span><span lang=zh-CN>线程在合并数据的时候，会占用</span><span
lang=en-US>CPU</span><span lang=zh-CN>和持有全局锁，这也会显著降低</span><span lang=en-US>Writer/Reader</span><span
lang=zh-CN>线程的处理能力，影响</span><span lang=en-US>TAIR</span><span lang=zh-CN>读写的</span><span
lang=en-US>RT</span><span lang=zh-CN>。</span></p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US>&nbsp;</p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US><span style='font-weight:bold'>3.
TAIR现有解决方案以及问题</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>有随着业务方需求的变化，</span><span lang=en-US>TAIR</span><span
lang=zh-CN>提供了批量处理接口</span><span lang=en-US>MPUT/MGET</span><span lang=zh-CN>。</span><span
lang=en-US>MPUT/MGET</span><span lang=zh-CN>接口相比</span><span lang=en-US>PUT/GET</span><span
lang=zh-CN>接口，可以一次性处理批量的</span><span lang=en-US>KV</span><span lang=zh-CN>数据。应用输入批量数据，</span><span
lang=en-US>TAIR</span><span lang=zh-CN>客户端会将批量</span><span lang=en-US>KV</span><span
lang=zh-CN>按其目标请求地址分类，处于同一目标地址的</span><span lang=en-US>KV</span><span
lang=zh-CN>会在同一次</span><span lang=en-US>RPC</span><span lang=zh-CN>中完成请求。批量接口最好的情况是，所有的</span><span
lang=en-US>KV</span><span lang=zh-CN>都发往同一个目标地址，在一次</span><span lang=en-US>RPC</span><span
lang=zh-CN>中完成；最坏的情况是，分</span><span lang=en-US>N</span><span lang=zh-CN>个</span><span
lang=en-US>RPC</span><span lang=zh-CN>完成请求。批量接口的优势在于节省了网络开销。如图</span><span
lang=en-US>3</span><span lang=zh-CN>所示。</span></p>

<p style='margin:0in'><img src="file3768.files/image003.jpg" width=720
height=529
alt="计算机生成了可选文字:&#10;APPgERVER&#10;INVO帆E&#10;KE丫－VALUES一SET,&#10;二月口口口口口口口门&#10;「&#10;KEY-VALUES一SETZ&#10;KE丫一VALU住S一SE丁n&#10;日尸&#10;阅匕&#10;产一，&#10;DA丁AS住RVER51&#10;DATASERVER52&#10;DATAS住RV住R53"></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-size:10.0pt;
color:black;text-align:center'><span style='font-family:宋体' lang=zh-CN>图</span><span
style='font-family:Consolas' lang=en-US>3 MPUT</span><span style='font-family:
宋体' lang=zh-CN>接口示意图</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-family:楷体;
font-size:12.0pt;color:black'>&nbsp;</p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>为了避免</span><span lang=en-US>LEVELDB</span><span
lang=zh-CN>作过多</span><span lang=en-US>compact</span><span lang=zh-CN>工作，对数据作排序，去重等预处理。这样数据到达</span><span
lang=en-US>SERVER</span><span lang=zh-CN>端后，在</span><span lang=en-US>compact</span><span
lang=zh-CN>过程中，只需要将</span><span lang=en-US>SST</span><span lang=zh-CN>文件从低</span><span
lang=en-US>level</span><span lang=zh-CN>移动到高</span><span lang=en-US>level, </span><span
lang=zh-CN>从而减少</span><span lang=en-US>CPU</span><span lang=zh-CN>使用率。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在我们生产实践中，我们发现业务方使用我们提供的批量接口向持久化</span><span
lang=en-US>TAIR</span><span lang=zh-CN>中导入数据效率不能满足我们的期望。</span><span
lang=en-US>MPUT</span><span lang=zh-CN>接口的请求，最终有</span><span lang=en-US>Writer</span><span
lang=zh-CN>线程处理。发现一些问题，列举如下三个：</span></p>

<ul type=disc style='margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black' lang=en-US><span style='font-family:楷体;
     font-size:12.0pt'>问题1： Compact线程容易成为系统瓶颈。 将内存中的table转化为磁盘SST文件是由Compact
     Thread线程完成的。每个instance只有一个该线程。所以，当大量Writer线程写入数据的时候，compact 线程往往成为系统瓶颈。</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black' lang=en-US><span style='font-family:楷体;
     font-size:12.0pt'>问题2：导入数据时候容易导致读写延迟增加。Writer线程，Reader线程，Compact
     线程会持有同一个锁来完成一些操作。若Compact线程频繁运行，持锁的时间就会变长，Reader/Writer线程会等待锁，增加了数据读写的延迟。</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black' lang=en-US><span style='font-family:楷体;
     font-size:12.0pt'>问题3：
     流控复杂。在导入数据的过程中，很容易将网卡跑满。另一方面，若批量接口超时，业务逻辑试图去重试。我们知道超时并不意味着数据没有到达SERVER端，而重试后就可能导致有重复数据，使得Compact工作量显著增加，从而影响系统性能。</span></li>
</ul>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>正是出于解决上述问题，</span><span lang=en-US>TAIR</span><span
lang=zh-CN>团队提出新的批量导入数据方案，称之为</span><span lang=en-US>BulkWrite</span><span
lang=zh-CN>方案</span><span lang=en-US>.</span></p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US>&nbsp;</p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US><span style='font-weight:bold'>4.
BulkWrite解决方案以及实现</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在数据导入的过程中，有</span><span lang=en-US>2</span><span
lang=zh-CN>个因素会影响</span><span lang=en-US>TAIR</span><span lang=zh-CN>的服务能力：</span></p>

<ul type=disc style='margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>1</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>）网卡打满；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>2</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>）</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>CPU</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>占用用率高；</span></li>
</ul>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>对于</span><span lang=en-US>1</span><span
lang=zh-CN>）可以通过流控来解决，避免批量导入数据将网卡打满；对于</span><span lang=en-US>2</span><span
lang=zh-CN>）来说，需要降低批量导入数据线程对</span><span lang=en-US>CPU</span><span lang=zh-CN>的使用率。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'>我们知道，在批量导入数据的时候，内存中的数据最终持久化到磁盘经过如下若干个步骤：</p>

<ul type=disc style='margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'>在内存中对对无序导入的数据有序化；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>根据内存内容创建</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>SST</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>文件；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'>将文件写入磁盘；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'>并将文件加入到当前版本中；</span></li>
</ul>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在无序输入数据有序化的过程中，需要对</span><span lang=en-US>key</span><span
lang=zh-CN>调用一次字符串比较函数；在创建</span><span lang=en-US>sst</span><span lang=zh-CN>文件的过程中，同样需要一次字符串比较函数。这些都是非常消耗</span><span
lang=en-US>CPU</span><span lang=zh-CN>资源的。另外一方面，批量导入的数据通过</span><span
lang=en-US>TCP</span><span lang=zh-CN>传入到</span><span lang=en-US>Server</span><span
lang=zh-CN>端。</span><span lang=en-US>Server</span><span lang=zh-CN>端对这些协议的处理也是消耗</span><span
lang=en-US>CPU</span><span lang=zh-CN>的。那么如何减少</span><span lang=en-US>CPU</span><span
lang=zh-CN>的消耗，将有限的</span><span lang=en-US>CPU</span><span lang=zh-CN>留给其他读写线程。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'>新的方案是：将复杂的耗时计算迁移到客户端，客户端计算资源相对廉价而丰富。具体地：</p>

<ul type=disc style='margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'>在客户端对所有数据进行排序；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>对有序的数据按一定</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>size</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>切分，创建</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>SST</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>文件；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>在客户端，将</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>SST</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>文件通过</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>TCP</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>直接发给</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>server</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>端；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>server</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>端在内存中更新</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>SST</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>中部分字段内容，并将内存中的</span><span style='font-family:楷体;font-size:
     12.0pt' lang=en-US>SST</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>文件写入磁盘；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>将</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>SST</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>文件加入到当前版本中；</span></li>
</ul>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在该方案中，我们可以看到，将数据排序，创建</span><span lang=en-US>SST</span><span
lang=zh-CN>等耗时计算移动到客户端。</span><span lang=en-US>server</span><span lang=zh-CN>端只是一次遍历所有</span><span
lang=en-US>key </span><span lang=zh-CN>修改其</span><span lang=en-US>sequence</span><span
lang=zh-CN>，</span><span lang=en-US> </span><span lang=zh-CN>写入磁盘，并将</span><span
lang=en-US>sst</span><span lang=zh-CN>纳入当前版本里。这</span><span lang=en-US>2</span><span
lang=zh-CN>个步骤必须放在</span><span lang=en-US>Server</span><span lang=zh-CN>端完成。现有方案与</span><span
lang=en-US>BulkWrite</span><span lang=zh-CN>访问对比如图所示。</span></p>

<p style='margin:0in'><img src="file3768.files/image004.jpg" width=720
height=558
alt="计算机生成了可选文字:&#10;TairSe八，erSide&#10;内存中数据有序化&#10;幸&#10;创建5ST文件&#10;幸&#10;SST文件写入磁盘&#10;+&#10;SST文件纳入当前版本管理&#10;C五entSide&#10;回&#10;TairServerSide&#10;C五entSide&#10;内存中数据有序化&#10;SST文件写入磁盘&#10;杏&#10;创建5ST文件&#10;SST文件纳入当前版本管理&#10;Bu攻认叭te&#10;助"></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-size:10.0pt;
color:black;text-align:center'><span style='font-family:宋体' lang=zh-CN>图</span><span
style='font-family:Consolas' lang=en-US>4 BulkWrite</span><span
style='font-family:宋体' lang=zh-CN>方案与</span><span style='font-family:Consolas'
lang=en-US>MPUT</span><span style='font-family:宋体' lang=zh-CN>方案示意图</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-family:楷体;
font-size:12.0pt;color:black'>&nbsp;</p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在</span><span lang=en-US>leveldb</span><span
lang=zh-CN>目前实现中，并没有提供直接导入</span><span lang=en-US>sst</span><span lang=zh-CN>文件的接口。</span><span
lang=en-US>TAIR</span><span lang=zh-CN>开发团队实现了上述方案。</span><span lang=en-US> </span><span
lang=zh-CN>这里给出</span><span lang=en-US>BulkWrite</span><span lang=zh-CN>实现的流程图，如图</span><span
lang=en-US>5</span><span lang=zh-CN>所示。</span></p>

<p style='margin:0in'><img src="file3768.files/image005.jpg" width=849
height=471 alt="Alt text"></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-size:10.0pt;
color:black;text-align:center'><span style='font-family:宋体' lang=zh-CN>图</span><span
style='font-family:Consolas' lang=en-US>5 BulkWrite</span><span
style='font-family:宋体' lang=zh-CN>流程图</span></p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US>&nbsp;</p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US><span style='font-weight:bold'>5.
测试结果</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>测试机器配置为，</span><span lang=en-US>48G</span><span
lang=zh-CN>内存，</span><span lang=en-US>24cores, 500G SSD</span><span lang=zh-CN>盘，千兆网卡（负载均衡模式）。在给定的导入数据速度情况下</span><span
lang=en-US>, </span><span lang=zh-CN>分别采用现有方案和</span><span lang=en-US>BulkWrite</span><span
lang=zh-CN>方案，导入数据。然后起</span><span lang=en-US>N</span><span lang=zh-CN>个链接，分别作</span><span
lang=en-US>PUT</span><span lang=zh-CN>和</span><span lang=en-US>GET</span><span
lang=zh-CN>操作，统计</span><span lang=en-US>PUT/GET</span><span lang=zh-CN>的</span><span
lang=en-US>QPS</span><span lang=zh-CN>以及</span><span lang=en-US>RT</span><span
lang=zh-CN>。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>在导入数据情况下，对</span><span lang=en-US>PUT</span><span
lang=zh-CN>接口的测试步骤：</span></p>

<ul type=disc style='margin-left:.375in;direction:ltr;unicode-bidi:embed;
 margin-top:0in;margin-bottom:0in'>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>1</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>）清理数据，重启</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>DATA SERVER</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>，取消流控限制；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>2</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>）启动</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>systemtap</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>统计接口</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>QPS</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>以及</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>RT</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>脚本，启动</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>CPU</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>采样脚本，启动网卡数据监控脚本；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>3) </span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>启动</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>BulkWrite</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>或者</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>Mput</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>压测程序（实验分</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>4</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>次进行）；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>4</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>）启动</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>YCSB(</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>压测工具），写入</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>1000000</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>条数据，每条长度</span><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>512B</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>；</span></li>
 <li style='margin-top:0;margin-bottom:0;vertical-align:middle;margin-top:0pt;
     margin-bottom:6pt;color:black'><span style='font-family:楷体;font-size:12.0pt'
     lang=en-US>5</span><span style='font-family:楷体;font-size:12.0pt'
     lang=zh-CN>）数据收集，绘制成统计图；</span></li>
</ul>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>统计数据如图</span><span lang=en-US>6</span><span
lang=zh-CN>所示，在该测试场景中，批量导入数据的速度为</span><span lang=en-US>80M/s, </span><span
lang=zh-CN>其中绿色曲线表示现有方案导入数据，红色曲线表示</span><span lang=en-US>BulkWrite</span><span
lang=zh-CN>方案导入数据所对应的统计图。在这个测试场景下，导入数据速度是</span><span lang=en-US>80M/s</span><span
lang=zh-CN>。最后，统计了在批量导入数据速度分别是</span><span lang=en-US>80M/s</span><span
lang=zh-CN>和</span><span lang=en-US>200M/s</span><span lang=zh-CN>的请看下，</span><span
lang=en-US>CPU</span><span lang=zh-CN>使用率情况。</span></p>

<p style='margin:0in'><img src="file3768.files/image006.png" width=720
height=806
alt="计算机生成了可选文字:&#10;尸uT的Qps对比&#10;劝据导人速度80MIs&#10;GE丫的gps对比&#10;数据寻人速度801,l/s&#10;70000&#10;600D0&#10;50000&#10;40000&#10;30000&#10;20000&#10;10000&#10;400DD&#10;350DD&#10;30000&#10;250D0&#10;望2D0D0&#10;O&#10;15000&#10;10000&#10;5000&#10;0&#10;S'O&#10;01&#10;23&#10;45&#10;67&#10;8910111213141516171819&#10;Tillle污&#10;01234&#10;尸u下的R下对t七&#10;数据导人速度80ljlS&#10;5678910111213141516171819&#10;Tin】e从&#10;GET的RT对比&#10;数据导人速度SOMIS&#10;功户t七卜“&#10;Tinle污&#10;sulkwrite&amp;MPutcpu使用朝寸比&#10;鳅据导入速度801,115&#10;sulkwrite&amp;MPutcpu使用郭寸比&#10;数据导人速度ZOOlvlls&#10;700&#10;2500&#10;600&#10;2000&#10;500&#10;1500&#10;1000&#10;遥姗旺侧n‘〕&#10;200&#10;100&#10;『U}11甘&#10;｝口｝日一&#10;月斗气」&#10;主母眨侧n'U&#10;500&#10;03691215182124273033363942454851545760&#10;Tiltle污&#10;03691215l82l24273033363g4245485l545760&#10;Tillle污"></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-size:10.0pt;
color:black;text-align:center'><span style='font-family:宋体' lang=zh-CN>图</span><span
style='font-family:Consolas' lang=en-US>6 PUT</span><span style='font-family:
宋体' lang=zh-CN>、</span><span style='font-family:Consolas' lang=en-US>GET</span><span
style='font-family:宋体' lang=zh-CN>接口的</span><span style='font-family:Consolas'
lang=en-US> QPS, RT</span><span style='font-family:宋体' lang=zh-CN>以及</span><span
style='font-family:Consolas' lang=en-US>CPU</span><span style='font-family:
宋体' lang=zh-CN>使用率对比的统计数据。</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;line-height:13pt;font-family:楷体;
font-size:12.0pt;color:black'>&nbsp;</p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>通过测试数据，可以看出</span><span lang=en-US>BulkWrite</span><span
lang=zh-CN>方案有效地提高了导入数据的性能，并且对正常读写影响较小。同时，可以看到在同等速率导入数据的时候，</span><span
lang=en-US>BulkWrite</span><span lang=zh-CN>占用</span><span lang=en-US>CPU</span><span
lang=zh-CN>显著减少。随着导入数据速度的增加，</span><span lang=en-US>BulkWrite</span><span
lang=zh-CN>方案要显著节约</span><span lang=en-US>CPU</span><span lang=zh-CN>。</span></p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US>&nbsp;</p>

<p style='margin-top:7pt;margin-bottom:7pt;line-height:20pt;font-family:黑体;
font-size:13.5pt;color:#444444' lang=en-US><span style='font-weight:bold'>6.
后续工作</span></p>

<p style='margin-top:0pt;margin-bottom:6pt;font-family:楷体;font-size:12.0pt;
color:black'><span lang=zh-CN>目前，在千兆网卡下，</span><span lang=en-US>BulkWrite</span><span
lang=zh-CN>方案跑满网卡时</span><span lang=en-US>CPU</span><span lang=zh-CN>使用率并不高。后续，可以在</span><span
lang=en-US>Client</span><span lang=zh-CN>端对</span><span lang=en-US>SST</span><span
lang=zh-CN>文件压缩，到</span><span lang=en-US>Server</span><span lang=zh-CN>端解压数据。占用少量</span><span
lang=en-US>CPU</span><span lang=zh-CN>使用率的情况下，提高导入数据速度。</span></p>

</div>

</div>

</div>

<div>

<p style='margin:0in'>&nbsp;</p>

<p style='text-align:left;margin:0in;font-family:宋体;font-size:9pt;color:#969696;
direction:ltr'>已使用 Microsoft OneNote 2013 创建。</p>

</div>

</body>

</html>
